// written by Florian Kleiner 2022
// https://github.com/kleinerELM/VFD-20x4-ESP32

#include <Arduino.h>
#include <Wire.h>
//#include <NTPClient.h>
#include <RtcDS1307.h>

#if defined(ARDUINO_ARCH_ESP8266)
  #include <ESP8266WiFi.h>
  #include <ESP8266WebServer.h>
  #include <ESP8266mDNS.h>
  #include <ESP8266HTTPUpdateServer.h>
  #define HOSTIDENTIFY  "esp8266"
  #define mDNSUpdate(c)  do { c.update(); } while(0)
  using WebServerClass = ESP8266WebServer;
  using HTTPUpdateServerClass = ESP8266HTTPUpdateServer;
#elif defined(ARDUINO_ARCH_ESP32)
  #include <WiFi.h>
  #include <WebServer.h>
  #include <ESPmDNS.h>
  #include "HTTPUpdateServer.h"
  #define HOSTIDENTIFY  "esp32_h"
  #define mDNSUpdate(c)  do {} while(0)
  using WebServerClass = WebServer;
  using HTTPUpdateServerClass = HTTPUpdateServer;
#endif
#include <WiFiClient.h>
#include <AutoConnect.h>

// DHT22
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>

#define VFD_W 20
#define VFD_H 4

RtcDS1307<TwoWire> Rtc(Wire);

#define DHTREADINTERVAL 1*60*1000 // in min
#define MIN
#define DHTPIN 4     // what digital pin the DHT22 is conected to
DHT_Unified dht(DHTPIN, DHT22);

#define LIGHT_SENSOR_PIN 33

float h = 0;
float t = 0;
void read_dht() {
    Serial.print("reading DHT22 at Pin " + String(DHTPIN) + ": ");

    // Get humidity event and print its value.
    sensors_event_t event;
    dht.humidity().getEvent(&event);
    if (isnan(event.relative_humidity)) {
      Serial.println(F("Error reading humidity!"));
    } else {
      h = event.relative_humidity;
      Serial.print(F("Humidity: "));
      Serial.print(h);
      Serial.println(F("%"));
    }

    dht.temperature().getEvent(&event);
    if (isnan(event.temperature)) {
      Serial.println(F("Error reading temperature!"));
    } else {
      t = event.temperature;
      Serial.print(F("Temperature: "));
      Serial.print(t);
      Serial.println(F("°C"));
    }
}

void init_dht() {
  Serial.println("-Init DHT22-");
  Serial.println("reading DHT-value every " + String(DHTREADINTERVAL) + " min");
  Serial.println();

  dht.begin();
  // Print temperature sensor details.
  sensor_t sensor;
  dht.temperature().getSensor(&sensor);
  Serial.println(F("------------------------------------"));
  Serial.println(F("Temperature Sensor"));
  Serial.print  (F("Sensor Type: ")); Serial.println(sensor.name);
  Serial.print  (F("Max Value:   ")); Serial.print(sensor.max_value);  Serial.println(F("°C"));
  Serial.print  (F("Min Value:   ")); Serial.print(sensor.min_value);  Serial.println(F("°C"));
  Serial.print  (F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F("°C"));
  Serial.println(F("------------------------------------"));
  // Print humidity sensor details.
  dht.humidity().getSensor(&sensor);
  Serial.println(F("Humidity Sensor"));
  Serial.print  (F("Sensor Type: ")); Serial.println(sensor.name);
  Serial.print  (F("Max Value:   ")); Serial.print(sensor.max_value);  Serial.println(F(" %"));
  Serial.print  (F("Min Value:   ")); Serial.print(sensor.min_value);  Serial.println(F(" %"));
  Serial.print  (F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F(" %"));
  Serial.println(F("------------------------------------"));
  Serial.println();
  read_dht();
}

// Fix hostname for mDNS. It is a requirement for the lightweight update feature.
static const char* host = HOSTIDENTIFY "-webupdate";
#define HTTP_PORT 80

// ESP8266WebServer instance will be shared both AutoConnect and UpdateServer.
WebServerClass  httpServer(HTTP_PORT);

#define USERNAME "Florian"           //*< Replace the actual username you want */
#define PASSWORD "legitupdatepass"   //*< Replace the actual password you want */
// Declare AutoConnectAux to bind the HTTPWebUpdateServer via /update url
// and call it from the menu.
// The custom web page is an empty page that does not contain AutoConnectElements.
// Its content will be emitted by ESP8266HTTPUpdateServer.
HTTPUpdateServerClass httpUpdater;
AutoConnectAux  update("/update", "Update");

// Declare AutoConnect and the custom web pages for an application sketch.
AutoConnect     portal(httpServer);
AutoConnectAux  hello;

static const char AUX_AppPage[] PROGMEM = R"(
{
  "title": "Humidity sensor",
  "uri": "/",
  "menu": true,
  "element": [
    {
      "name": "caption",
      "type": "ACText",
      "value": "<h2>Humidity sensor</h2>",
      "style": "text-align:center;color:#2f4f4f;padding:10px;"
    },
    {
      "name": "content",
      "type": "ACText",
      "value": "DHT22 auf NodeMCU32s."
    }
  ]
}
)";

// line feed
void vfd_lf() { Serial2.write(0x0A); }
// set cursor to the left-most-character
void vfd_cr() { Serial2.write(0x0D); }
void vfd_new_line() { vfd_lf(); vfd_cr(); }

// write modes
// left-to-right, bottom-to-top, auto CR+LF
void vfd_bottom_to_top() { Serial2.write(0x10); }
// left-to-right, top-to-bottom, auto CR+LF
void vfd_top_to_bottom() { Serial2.write(0x11); }
// CR & LF off, overwrite right-most-character
void vfd_cr_lf_off()     { Serial2.write(0x12); }
// Horizontal scoll mode (right-to-left) only if line is filled
void vfd_hor_scroll()    { Serial2.write(0x13); }

// cursor settings
bool cursor_visible = true;
void vfd_cursor_hide() {
  if (cursor_visible)  { Serial2.write(0x0E); }
}
void vfd_cursor_show() {
  if (!cursor_visible) { Serial2.write(0x0F); }
}
void vfd_cursor_toggle() {
  if (cursor_visible) {
    vfd_cursor_hide();
  } else {
    vfd_cursor_show();
  }
}
void vfd_cursor_home() { Serial2.write(0x16); }

// software reset display
void vfd_reset() {
  Serial2.write(0x14);
  delay(1200);
}

void vfd_cls() { Serial2.write(0x15); }

// select specific character sets (eng is standard)
//                   23 5B 5C 5D 5F 60
// scientific        #  =  ∑  µ  Ω  Δ
void vfd_charset_sci() { Serial2.write(0x1A); }
// english           #  [  \  ]  _  `
void vfd_charset_eng() { Serial2.write(0x1C); }
// general european  £  [  \  ]  _  `
void vfd_charset_eur() { Serial2.write(0x1D); }
// scandinavian      £  Ä  Ö  Å  _  `
void vfd_charset_sca() { Serial2.write(0x1E); }
// german            £  Ä  Ö  Ü  _  `
void vfd_charset_ger() { Serial2.write(0x1F); }

// the manual described 4 brightness states. However only 2 seem to work:
// 0, 1, 2 dim
// 3 bright
void vfd_brightness( int value ) {
  Serial2.write(0x19);
  if ( value == 1 ) {
    Serial2.write(0x4D);
  } else if ( value == 2 ) { // uneffctive for 03601-34-080
    Serial2.write(0x4E);
  } else if ( value == 3 ) { // uneffctive for 03601-34-080
    Serial2.write(0x4F);
  } else {
    Serial2.write(0x4C);
  }
}

void auto_brightness() {
  int analogValue = analogRead(LIGHT_SENSOR_PIN);
  int brightnesslevel = 0;
  if (analogValue < 40) {          // very dark
    brightnesslevel = 0;
  } else if (analogValue < 1500) { // dark
    brightnesslevel = 0;//1;
  } else if (analogValue < 3000) { // bright
    brightnesslevel = 3;//2;
  } else {                         // very bright
    brightnesslevel = 3;//3;
  }
  Serial.println( "Brightness "+ String(analogValue) + "/4096, resulting vfd brightness level: " + String( brightnesslevel ) + "/2"  );
  vfd_brightness( brightnesslevel );
}

// print the text centered without a line break
int vfd_print( String text ) {
  text.replace('Ä', '[');
  text.replace('Ö', '\\');
  text.replace('Ü', ']');
  text.replace('°', '~');

  int len = text.length();
  int i = 0;
  if (len < VFD_W-1) {
    for (i=0;i<floor( (VFD_W - len) / 2 );i++) {
      Serial2.print(' ');
    }
  }

  for (int j=0;j<len;j++) {
    Serial2.print(text[j]);
    delay(100);
  }

  if (len < VFD_W ) {
    for (int k=0;k<(VFD_W-len-i);k++) {
      Serial2.print(' ');
    }
  }
  return len;
}

// print the text centered with a line break
void vfd_println( String text ) {
  int len = vfd_print( text );
  vfd_new_line();
}

#define countof(a) (sizeof(a) / sizeof(a[0]))

void printDateTime(const RtcDateTime& dt)
{
    char datestring[20];

    snprintf_P(datestring,
            countof(datestring),
            PSTR("%02u.%02u.%04u %02u:%02u:%02u"),
            dt.Day(),
            dt.Month(),
            dt.Year(),
            dt.Hour(),
            dt.Minute(),
            dt.Second() );
    Serial.print(datestring);
}

void vfd_date(const RtcDateTime& dt)
{
    printDateTime(dt);

    char datestring[20];

    snprintf_P(datestring,
            countof(datestring),
            PSTR("%02u.%02u.%04u"),
            dt.Day(),
            dt.Month(),
            dt.Year() );

    vfd_print(datestring);
}

void vfd_time(const RtcDateTime& dt)
{
    printDateTime(dt);

    char datestring[20];

    snprintf_P(datestring,
            countof(datestring),
            PSTR("%02u:%02u"),
            dt.Hour(),
            dt.Minute() );

    vfd_print(datestring);
}

RtcDateTime get_current_time() {
  if (!Rtc.IsDateTimeValid()) {
    if (Rtc.LastError() != 0) {
      // we have a communications error
      // see https://www.arduino.cc/en/Reference/WireEndTransmission for
      // what the number means
      Serial.print("RTC communications error = ");
      Serial.println(Rtc.LastError());
    } else {
      // Common Causes:
      //    1) the battery on the device is low or even missing and the power line was disconnected
      Serial.println("RTC lost confidence in the DateTime!");
    }
  }

  return Rtc.GetDateTime();
}

RtcDateTime compiled = RtcDateTime(__DATE__, __TIME__);
const char data[] = "what time is it";
void init_rtc_time() {
  Serial.println("-Init RTC-");
  Rtc.Begin();

  if (!Rtc.GetIsRunning()) {
      Serial.println("RTC was not actively running, starting now");
      Rtc.SetIsRunning(true);
  }

  // check if the time is plausible
  RtcDateTime now = get_current_time();
  if ( now < compiled || now.Year() > 2030 ) {
      Serial.println("RTC is older than compile time!  (Updating DateTime)");
      Rtc.SetDateTime(compiled);
  }

  // never assume the Rtc was last configured by you, so
  // just clear them to your needed state
  Rtc.SetSquareWavePin(DS1307SquareWaveOut_Low);

  /* comment out on a second run to see that the info is stored long term */
  // Store something in memory on the RTC
  Rtc.SetMemory(0, 13);
  uint8_t written = Rtc.SetMemory(13, (const uint8_t*)data, sizeof(data) - 1); // remove the null terminator strings add
  Rtc.SetMemory(1, written);
  /* end of comment out section */

  Serial.println();
}


int last_read = millis();
void setup() {
  delay(1000);
  // debug-serial-connection
  Serial.begin(9600);

  Serial.println();
  Serial.println();
  Serial.println("---VFD Display + DHT22 + RTC---");
  Serial.println("last build: " __DATE__ ", " __TIME__);
  Serial.println();

  init_dht();

  init_rtc_time();
  Serial.println();
  // VFD serial connection
  // at pin 16 and pin 17
  // there were noise issues using 9600 baud
  Serial2.begin(1200 , SERIAL_7O1, 16,17);
  vfd_cls();
  vfd_println("build date");
  vfd_date( compiled );
  vfd_println("");
  //vfd_new_line();
  vfd_print("by Florian Kleiner");


  Serial.println("-WiFi-");

  // Prepare the ESP8266HTTPUpdateServer
  // The /update handler will be registered during this function.
  httpUpdater.setup(&httpServer, USERNAME, PASSWORD);

  // Load a custom web page for a sketch and a dummy page for the updater.
  hello.load(AUX_AppPage);
  portal.join({ hello, update });
  //if (portal.begin()) { // code stops if not able to connect to wifi... this sucks!
    Serial.println("1");
    if (MDNS.begin(host)) {
        MDNS.addService("http", "tcp", HTTP_PORT);
        Serial.println(" WiFi connected!");
        Serial.printf( " HTTPUpdateServer ready: http://%s.local/update\n", host);
        Serial.println();
    }
    else
      Serial.println("Error setting up MDNS responder");
  //}

  Serial.println();
  Serial.println("-- Setup done --");
  Serial.println();

  delay(2000);
}


//char dht_string[21];
void loop() {
  vfd_cls();
  if ( DHTREADINTERVAL < millis() - last_read ) {
    read_dht();
    last_read = millis();
  }
  //auto_brightness();
  vfd_brightness(3);
  vfd_cursor_hide();
  vfd_cr_lf_off();

  vfd_charset_ger();
  vfd_cursor_home();

  vfd_println("Willkommen zum");
  vfd_println("Dorffest in Ulla");
  vfd_println("im Museum Flugplatz");
  vfd_println("Weimar-Nohra");
  vfd_println("Ge\\ffnet bis 17 Uhr");
  //vfd_new_line();

  RtcDateTime now = get_current_time();
  //vfd_date( now );
  vfd_time( now );
  //snprintf(dht_string, 21, "%.1f ~C    %.1f %s", t, h, "%-RH");
  //vfd_print(String(dht_string));
  Serial.println();
  Serial.println("---loop done---");
  delay(5000);
}